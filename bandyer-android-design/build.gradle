/*
 * Copyright 2021-2022 Bandyer @ https://www.bandyer.com
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *           http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

buildscript{
    ext.dokka_version = "0.10.1"

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

apply plugin: 'com.android.library'

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kotlin-kapt'

def gitHubUsername = "Bandyer"
def gitHubProjectName = "Bandyer-Android-Design"

// initialize - do not modify this if your project is on github
def siteUrl = "https://github.com/${gitHubUsername}/${gitHubProjectName}"
def gitUrl = siteUrl + '.git'
def bugTrackerUrl = siteUrl + '/issues/'
def projectName = "Android-Design"
// end - do not modify this if your project is on github

def projectDesc = "This library is the Bandyer's sdk design for android video communication."
def projectGroup = "com.bandyer"
def projectOrg = "bandyer"
def projectLicenses = ["Apache-2.0"]
def projectLicenseUrl = "https://github.com/Bandyer/Bandyer-Android-Design/LICENSE.txt"
def projectKeywords = ['bandyer-android-design', 'sdk-design', 'android-design', 'android', 'video', 'conference', 'helpdesk', 'bandyer', 'webrtc', 'call', 'audio']
def developerFullName = "Bandyer Srl"
group = projectGroup
version = "1.0.4"

// Library versions
def fastAdapterVersion = "3.3.1"
def lifecycleVersion = '2.2.0'
def androidX = "1.1.0"
def materialVersion = "1.3.0"

android {
    compileSdkVersion sdkVersion
    buildToolsVersion buildToolsVersion
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion sdkVersion
        versionCode 1
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding true
    }

    aaptOptions.cruncherEnabled = false
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    /*** Platform ***/
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation("androidx.appcompat:appcompat:1.2.0")
    implementation("androidx.recyclerview:recyclerview:$androidX")
    implementation("androidx.vectordrawable:vectordrawable:$androidX")
    implementation("androidx.vectordrawable:vectordrawable-animated:$androidX")
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    api "com.google.android.material:material:$materialVersion"

    /*** Testing ***/
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'io.mockk:mockk:1.10.2'

    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'org.mockito:mockito-android:2.+'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0')

    compileOnly 'com.ablanco.zoomy:zoomy:1.1.0'

    /*** UI ***/
    api 'com.squareup.picasso:picasso:2.71828'
    api 'androidx.constraintlayout:constraintlayout:2.0.4'
    api "com.mikepenz:fastadapter:$fastAdapterVersion"
    api "com.mikepenz:fastadapter-extensions:$fastAdapterVersion"
    api "com.mikepenz:fastadapter-commons:$fastAdapterVersion"

    api 'com.google.android:flexbox:2.0.1'

    /*** BANDYER ***/
    implementation "com.bandyer:bandyer-android-common:$bandyer_common"
}


Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

install {
    repositories.mavenInstaller {
        pom.project {
            name projectName
            description projectDesc
            packaging 'aar'
            groupId projectGroup
            version version
            url siteUrl
            licenses {
                license {
                    name projectLicenses[0]
                    url projectLicenseUrl
                }
            }
            developers {
                developer {
                    id properties.getProperty("bintray.user")
                    name developerFullName
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl

            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
//    override = true
    dryRun = true
    pkg {
        repo = "Communication"
        name = projectName
        userOrg = projectOrg
        desc = projectDesc
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        issueTrackerUrl = bugTrackerUrl
        licenses = projectLicenses
        labels = projectKeywords
        publicDownloadNumbers = true
        publish = true
    }
}

task dokkaDoc() {
    dependsOn createApiDoc("genKDoc", "html", "kDoc")
}

def createApiDoc(def name, def format, def dir) {
    return tasks.create(name, org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = format
        outputDirectory = "$buildDir/$dir"
        configuration {
            reportUndocumented = true
            skipEmptyPackages = true // Do not create index pages for empty packages
        }
    }
}

task kdocJar(type: Jar, dependsOn: dokkaDoc) {
    classifier = 'kdoc'
    from "$buildDir/kDoc"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives kdocJar
    archives sourcesJar
}