ext.moduleGroupId = "com.bandyer"
ext.moduleProductId = "video-android"
ext.moduleVersion = "2.0.2"

Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

def mavenAccessKey = properties.getProperty("maven.accessKey") ?: ""
def mavenSecretKey = properties.getProperty("maven.secretKey") ?: ""
def mavenDistributionId = properties.getProperty("maven.distributionId") ?: ""

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = "s3://maven-bandyer/releases/"
                credentials(AwsCredentials) {
                    accessKey = mavenAccessKey
                    secretKey = mavenSecretKey
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.release
                groupId = moduleGroupId
                artifactId = moduleProductId + "-" + project.getName()
                version = moduleVersion
                artifact kdocJar
                artifact sourcesJar
            }
        }
    }
}

task invalidateCache(type: Exec) {
    workingDir '../scripts'
    def publishPath = "releases"
    def packageName = moduleGroupId + "." + project.getName()
    commandLine 'python', './invalidate_s3_cache.py', mavenAccessKey, mavenSecretKey, mavenDistributionId, publishPath, packageName, version
}

task publishUpload {
    def dryRun = true
    def publishTask = 'publishToMavenLocal'
    if (!dryRun) publishTask = 'publish'
    dependsOn publishTask
    dependsOn 'invalidateCache'
    tasks.findByName('invalidateCache').mustRunAfter publishTask
}


dokkaHtml {
    outputDirectory = new File("$buildDir/kDoc")
    dokkaSourceSets {
        println(it)
        configureEach {
            moduleName.set(project.name)
            reportUndocumented.set(true)
            jdkVersion.set(11)
            includeNonPublic.set(false)
            skipEmptyPackages.set(true)
            externalDocumentationLink {
                url.set(new URL("https://docs.bandyer.com/Bandyer-Android-Common/kDoc/bandyer-android-common/"))
            }
        }
    }
}


task dokkaDoc() {
    dependsOn dokkaHtml
}

task kdocJar(type: Jar, dependsOn: dokkaHtml) {
    archiveClassifier.set("javadoc")
    from "$buildDir/kDoc"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives kdocJar
    archives sourcesJar
}